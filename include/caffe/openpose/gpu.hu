#ifndef CAFFE_OPENPOSE_GPU_HPP
#define CAFFE_OPENPOSE_GPU_HPP

namespace caffe {
  // Binary weights = +-n - XNOR-style
  template <typename Dtype>
  inline __device__ Dtype getL1Norm(const Dtype* weightData, const int weightArea)
  {
    // L1 norm
    auto l1Norm = Dtype(0);
    for (auto i = 0 ; i < weightArea ; i++)
    {
      // // truncate to +-1
      // weightData[i] = max(-Dtype(1), min(Dtype(1), weightData[i]));
      // l1Norm
      l1Norm += (weightData[i] < 0 ? -weightData[i] : weightData[i]);
    }
    return l1Norm;
  }

  // Binary weights = +-n - XNOR-style
  template <typename Dtype>
  __global__ void normalizeWeightsGpu(Dtype* weightBinaryData, const Dtype* weightRealData, const int count,
                                      const int weightArea)
  {
    const int globalIdx = blockIdx.x * blockDim.x + threadIdx.x;
    if (globalIdx < count)
    {
      // Offset
      const auto offset = globalIdx * weightArea;
      const auto* weightRealDataOffset = &weightRealData[offset];
      auto* weightBinaryDataOffset = &weightBinaryData[offset];
      // XNOR-style
      // L1 norm
      const auto l1Norm = getL1Norm(weightRealDataOffset, weightArea);
      // Update output
      const auto alphaOptimal = l1Norm / weightArea;
      for (auto i = 0 ; i < weightArea ; i++)
        weightBinaryDataOffset[i] = (weightRealDataOffset[i] < 0 ? -alphaOptimal : alphaOptimal);
    }
  }

  // Binary weights = +-n - XNOR-style
  template <typename Dtype>
  __global__ void backwardNormalizeWeightsGpu(Dtype* bottomDiff, const Dtype* topDiff, const Dtype* bottomData, const int count,
                                              const int weightArea)
  {
    const int globalIdx = blockIdx.x * blockDim.x + threadIdx.x;
    if (globalIdx < count)
    {
      // Offset
      const auto offset = globalIdx * weightArea;
      const auto* topDiffOffset = &topDiff[offset];
      const auto* bottomDataOffset = &bottomData[offset];
      auto* bottomDiffOffset = &bottomDiff[offset];
      // XNOR-style
      // L1 norm
      const auto l1Norm = getL1Norm(topDiffOffset, weightArea);
      // Update output
      const auto oneOverWeightArea = Dtype(1)/Dtype(weightArea);
      for (auto i = 0 ; i < weightArea ; i++)
        bottomDiffOffset[i] = topDiffOffset[i] * oneOverWeightArea
                            * (1 + l1Norm * max(-Dtype(1), min(Dtype(1), bottomDataOffset[i])));
    }
  }
}

#endif // CAFFE_OPENPOSE_GPU_HPP
